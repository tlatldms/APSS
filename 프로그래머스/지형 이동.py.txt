from collections import deque

dxy = [[-1,0],[0,1],[1,0],[0,-1]]


def identify(land, height):
    N = len(land)
    num_board = [[0]*N for _ in range(N)]
    visit = [[0]*N for _ in range(N)]
    num = 0
    for i in range(N):
        for j in range(N):
            if visit[i][j] : continue
            visit[i][j] = 1
            dq = deque()
            dq.append([i, j])
            while dq:
                x, y = dq.popleft()
                num_board[x][y] = num
                for k in range(4):
                    nx = x + dxy[k][0]
                    ny = y + dxy[k][1]
                    if nx >= N or nx < 0 or ny >= N or ny < 0 : continue
                    if visit[nx][ny] : continue
                    if abs(land[x][y] - land[nx][ny]) <= height: # 사다리 없이 이동 가능
                        visit[nx][ny] = 1
                        dq.append([nx, ny])
            num += 1
    return num_board , num                   
    
def count_edge(land, height, num_board, num):
    N = len(land)
    visit = [[0]*N for _ in range(N)]
    edges=[]
    for i in range(N):
        for j in range(N):
            if visit[i][j] : continue
            visit[i][j] = 1
            dq = deque()
            dq.append([i, j])
            while dq:
                x, y = dq.popleft()
                for k in range(4):
                    nx = x + dxy[k][0]
                    ny = y + dxy[k][1]
                    if nx >= N or nx < 0 or ny >= N or ny < 0: continue
                    if visit[nx][ny] : continue
                    nextland = num_board[nx][ny]
                    nowland = num_board[x][y]
                    if  nextland != nowland: # 사다리가 필요한 순간: 엣지 추가
                        edges.append((abs(land[x][y] - land[nx][ny]), nowland, nextland)) 
                    else: # 사다리 없이 이동 가능
                        visit[nx][ny] = 1
                        dq.append([nx, ny])
    return edges
                    
def _find(x):
    global p
    if p[x] != x:
        return _find(p[x])
    else: return x
    
def until_end(edges, num):
    global p
    cnt = 0
    cc=0
    for e in edges:
        # print("p of 1: " , union_find(e[1]) , "p of 2: ", union_find(e[2]) )
        uf1 = _find(e[1])
        uf2 = _find(e[2])
        if  uf1 != uf2: # 둘의 부모가 같지 않으면?
            # print("i: " , i , "p of 1: " , union_find(e[1]) , "p of 2: ", union_find(e[2]), "cost: ", e[0] )
            if uf1 > uf2:
                uf1, uf2 = uf2, uf1
            p[uf1] = uf2
            cnt += e[0]
            cc += 1
            if cc >= num : break
    return cnt

def solution(land, height):
    answer = 0
    N = len(land)
    num_board, num = identify(land, height)
    edges= count_edge(land, height, num_board, num)
    global p
    edges.sort(key= lambda x : (x[0]))
    p = [i for i in range(num)]
    return until_end(edges, num)