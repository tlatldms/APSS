import copy
def rotate(key, M):
    copied = [[0]*M for i in range(M)]
    for i in range(M):
        for j in range(M):
            copied[i][j] = key[M-1-j][i]
    return copied


board = [[0]*60 for i in range(60)]
def solution(key, lock):
    M, N = len(key), len(lock)
    one = rotate(key, M)
    two = rotate(one, M)
    three = rotate(two, M)
    keys =[key, one, two, three]
    zeros=0

    for i in range(N):
        for j in range(N):
            board[M+i-1][M+j-1] = lock[i][j]
            if lock[i][j] == 0:
                zeros += 1
    for e in range(4):
        now_key = keys[e]

        for i in range(N+M-1):
            for j in range(N+M-1):
                flag= True
                cnt=0
                for r in range(M):
                    for_outer = True
                    for c in range(M):
                        x, y = i+r, j+c
                        if x < M-1 or y < M-1 or x >= M-1+N or y >= M-1+N:
                            continue

                        if not board[x][y]^now_key[r][c]: # 같아버리면 False므로 돌아감
                            for_outer = False
                            flag=False
                            break
                        if board[x][y] == 0:
                            cnt += 1
                        #print(i,j, x,y, r,c )
                    if not for_outer:
                        break

                if flag == True and cnt == zeros:
                    print(zeros, cnt)
                    return True

    return False