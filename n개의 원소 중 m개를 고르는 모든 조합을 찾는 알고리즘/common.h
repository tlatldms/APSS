/*
   여기에는 queue, stack 할 것 없이 사용되는 데이터를 저장하는 곳이야.
   소스 코드를 보면 알겠지만 조금 특이하게 생긴 매크로들이 보이지?
   하나씩 설명해줄게. 어렵지 않아.

   "#ifndef 어쩌구"는 컴파일러 directive나 #define으로 "어쩌구"가 정의되어있는지 체크하는 구문이야.
   이렇게하면 common.h가 다른 코드에서 여러번 호출되더라도 한번만 실행하기 때문에
   정상적으로 컴파일이 가능하지.
   조금 더 자세히 보도록 하자.
   예를 들어 stack.h와 queue.h를 모두 include해서 사용하는 test2.c 코드를 컴파일할 떄,
   만약 #ifndef로 __COMMON_H__를 체크하지 않는다면 stack.h와 queue.h 모두 common.h를 include하기 때문에
   중복해서 이 common.h 파일을 컴파일 단계에 추가할거야.
   컴파일러는 이런쪽으로는 너무 보수적이어서 여러번 include되면 같은 파일이더라도 무조건 컴파일 단계에
   참여시켜버린단다.
   신기하지?
   어쨋든 두번 include되었을 때, 같은 코드를 두번 컴파일하지 않도록 방지하는 용도로 #ifndef를 사용하는거야.
   그리고 #ifndef는 #endif와 항상 쌍을 이뤄야 하는 놈이야.
   "#ifndef 어쩌구 ... #endif" 이런식으로 코드를 짜면 "어쩌구"가 정의되어있는 경우에 ...을 무시하겠다는거지.
   그래서 보통 헤더 파일에 자주 쓰이는데, 그 이유는 헤더파일이 여러 코드에서 사용되는 함수를 정의하기 위해
   만들어졌기 때문에 언제 어디서 include되어 사용될지 모르기 때문이지.
   그래서 최초에 __COMMON_H__가 정의되어 있지 않을 때 #ifndef를 통과하고 #define으로 __COMMON_H__를
   정의함으로써 두번째 이후의 컴파일 단계에서는 해당 코드를 더이상 컴파일에 참여시키지 않겠다는 얘기야.

   앞으로 시은이도 시은이만의 library를 만들 때 항상 이런식의 깔끔한 코드를 만들면 좋을 것 같아서
   조금 어려운 얘기지만 알려줘봤어!
*/

#ifndef __COMMON_H__
#define __COMMON_H__

#define SIZE 1024

typedef char bool;

#define true 1
#define false 0

#endif//__COMMON_H__
